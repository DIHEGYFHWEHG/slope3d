<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>3D Slope Game - Three.js</title>
    <style>
        body { margin: 0; overflow: hidden; }
        canvas { display: block; }
    </style>
</head>
<body>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>

    <script>
        // Scene setup
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        // Ball (player) setup
        const ballGeometry = new THREE.SphereGeometry(1, 32, 32);
        const ballMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
        const ball = new THREE.Mesh(ballGeometry, ballMaterial);
        scene.add(ball);

        ball.position.set(0, 5, 0); // Position the ball above the slope

        // Slope setup (simple plane tilted to simulate a slope)
        const slopeGeometry = new THREE.PlaneGeometry(10, 30, 10, 10);
        const slopeMaterial = new THREE.MeshBasicMaterial({ color: 0x808080, wireframe: true });
        const slope = new THREE.Mesh(slopeGeometry, slopeMaterial);
        slope.rotation.x = -Math.PI / 6; // Tilt the slope
        slope.position.set(0, -1, 0);
        scene.add(slope);

        // Lighting
        const light = new THREE.AmbientLight(0xffffff, 1);
        scene.add(light);

        // Camera positioning
        camera.position.z = 20;
        camera.position.y = 10;
        camera.lookAt(ball.position);

        // Game variables
        let velocityX = 0; // Horizontal movement
        let velocityZ = 0; // Forward movement (gravity effect)
        let gravity = -0.05; // Gravity effect

        // Keyboard controls
        document.addEventListener('keydown', (event) => {
            if (event.key === 'ArrowLeft') velocityX = -0.1; // Move left
            if (event.key === 'ArrowRight') velocityX = 0.1; // Move right
            if (event.key === 'ArrowUp') velocityZ = 0.1; // Move forward
            if (event.key === 'ArrowDown') velocityZ = -0.1; // Move backward
        });

        document.addEventListener('keyup', (event) => {
            if (event.key === 'ArrowLeft' || event.key === 'ArrowRight') velocityX = 0;
            if (event.key === 'ArrowUp' || event.key === 'ArrowDown') velocityZ = 0;
        });

        // Animate the game
        function animate() {
            requestAnimationFrame(animate);

            // Apply gravity to ball
            velocityZ += gravity;

            // Update ball position based on velocity
            ball.position.x += velocityX;
            ball.position.z += velocityZ;

            // Keep ball within bounds (world boundaries)
            if (ball.position.x > 5) ball.position.x = 5;
            if (ball.position.x < -5) ball.position.x = -5;

            // Ball collision with floor
            if (ball.position.y > 0) {
                ball.position.y += velocityZ;
            } else {
                // If ball hits the slope (ground), reset to top
                ball.position.y = 5;
                velocityZ = 0; // Stop falling
            }

            // Render the scene
            renderer.render(scene, camera);
        }

        animate();

        // Adjust for window resize
        window.addEventListener('resize', () => {
            renderer.setSize(window.innerWidth, window.innerHeight);
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
        });
    </script>
</body>
</html>
